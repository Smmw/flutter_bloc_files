#!/bin/bash

# Color
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m\n' # No Color

PARAM_HELP_S="-h"
PARAM_HELP_L="--help"

PARAM_FORCE_S="-f"
PARAM_FORCE_L="--force"

PARAM_ALL_S="-a"
PARAM_ALL_L="--all"

PARAM_BLOC_S="-bl"
PARAM_BLOC_L="--bloc"

PARAM_EVENTS_S="-e"
PARAM_EVENTS_L="--events"

PARAM_STATES_S="-s"
PARAM_STATES_L="--states"

PARAM_BARREL_S="-ba"
PARAM_BARREL_L="--barrel"

print_help() {
    PARAM_DES=("Show Help" "Override the existing file" "Create all files" "Create Bloc file" "Create Events file" "Create Stats file" "Create Barrel file")

    echo $PARAM_HELP_S" | "$PARAM_HELP_L "    Show Help"
    echo $PARAM_FORCE_S" | "$PARAM_FORCE_L "   Override the existing file"
    echo $PARAM_ALL_S" | "$PARAM_ALL_L "     Create all files"
    echo $PARAM_BLOC_S"|"$PARAM_BLOC_L "     Create Bloc file"
    echo $PARAM_EVENTS_S" | "$PARAM_EVENTS_L "  Create Events file"
    echo $PARAM_STATES_S" | "$PARAM_STATES_L "  Create Stats file"
    echo $PARAM_BARREL_S"|"$PARAM_BARREL_L "   Create Barrel file"

    exit
}

print_input_error() {
    printf "${RED}Please check your inputs$filePath${NC}"
    print_help
}

if [[ $# -lt 2 ]]; then
    print_input_error
fi

blocName=$1

IVALID_PARAM=()
while [[ $# -gt 1 ]]
do
key="$2"

case $key in
    $PARAM_HELP_S|$PARAM_HELP_L)
    print_help
    ;;
    $PARAM_FORCE_S|$PARAM_FORCE_L)
    FORCE=true
    shift # past argument
    ;;
    $PARAM_ALL_S|$PARAM_ALL_S)
    ALL=true
    shift # past argument
    ;;
    $PARAM_BLOC_S|$PARAM_BLOC_L)
    BLOC=true
    shift # past argument
    ;;
    $PARAM_EVENTS_S|$PARAM_EVENTS_L)
    EVENTS=true
    shift # past argument
    ;;
    $PARAM_STATES_S|$PARAM_STATES_L)
    STATES=true
    shift # past argument
    ;;
    $PARAM_BARREL_S|$PARAM_BARREL_L)
    BARREL=true
    shift # past argument
    ;;
    *)    # unknown option
    IVALID_PARAM+=("$2") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${IVALID_PARAM[@]}" # restore positional parameters

if [ ${#IVALID_PARAM[@]} -gt 0 ]; then
    printf "${RED}Invalid parameter found: $IVALID_PARAM $filePath${NC}"
    print_input_error
fi


filePath="$PWD/lib/blocs/$blocName"

if [ -d "$filePath" ]; then
  if [ -z "$(ls -A $filePath)" ]; then
    rm -r $filePath
  else
    if [ "$FORCE" == "true" ]; then
      printf "${RED}Force parameter is set, so removing the existing $filePath${NC}"
      rm -r $filePath
    else
      printf "${RED}The folder already exists, and has content, use -f or --force to override the content!${NC}"
      exit
    fi
  fi
fi

mkdir $filePath

classPrefix=''
IFS='_' read -ra BLOCNAMES <<< "$blocName"
for i in "${BLOCNAMES[@]}"; do
  classPrefix=$classPrefix$(tr a-z A-Z <<< ${i:0:1})${i:1}
done

stateClassName=$classPrefix"State"
stateFileName=$blocName"_states.dart"

eventClassName=$classPrefix"Event"
eventFileName=$blocName"_events.dart"

blocClassName=$classPrefix"Bloc"
blocFileName=$blocName"_bloc.dart"

barrelFileName=$blocName"_barrel.dart"

# State
file=$filePath"/"$stateFileName
initialStateClass=$classPrefix"InitialState"
if [[ "$ALL" == "true" ||  "$STATES" == "true" ]]; then
cat <<EOF > $file
import 'package:equatable/equatable.dart';

abstract class $stateClassName extends Equatable {
  const $stateClassName();

  @override
  List<Object> get props => [];
}

class $initialStateClass extends $stateClassName {}
EOF
fi

# Event
file=$filePath"/"$eventFileName
if [[ "$ALL" == "true" ||  "$EVENTS" == "true" ]]; then
cat <<EOF > $file
import 'package:equatable/equatable.dart';

abstract class $eventClassName extends Equatable {
  const $eventClassName();
}
EOF
fi

# Bloc
file=$filePath"/"$blocName"_bloc.dart"
if [[ "$ALL" == "true" ||  "$BLOC" == "true" ]]; then
cat <<EOF > $file
import 'dart:async';
import 'package:bloc/bloc.dart';
import '$barrelFileName';

class $blocClassName extends Bloc<$eventClassName, $stateClassName> {
  $blocClassName() : super ($initialStateClass());

  @override
  Stream<$stateClassName> mapEventToState($eventClassName event) async* {
  }
}
EOF
fi

# Barrel file
file=$filePath"/"$barrelFileName
if [[ "$ALL" == "true" ||  "$BARREL" == "true" ]]; then
cat <<EOF > $file
export '$eventFileName';
export '$stateFileName';
export '$blocFileName';
EOF

# Write to blocs barrel file
blocsBarrelFile='lib/blocs/blocs_barrel.dart';
if [ ! -f blocs_barrel.dart ]; then
touch $blocsBarrelFile
fi

# Check if the barrel file is already exported
exportBlocString="export '$blocName/$barrelFileName';"
if ! grep -Fxq "$exportBlocString" $blocsBarrelFile; then
oldContent=`cat $blocsBarrelFile`
cat <<EOF > $blocsBarrelFile
$oldContent
$exportBlocString
EOF
fi

fi

exit
