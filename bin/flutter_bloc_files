#!/bin/bash

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -f|--force)
    FORCE=true
    shift # past argument
    ;;
    -a|--all)
    ALL=true
    shift # past argument
    ;;
    -bl|--bloc)
    BLOC=true
    shift # past argument
    ;;
    -e|--events)
    EVENTS=true
    shift # past argument
    ;;
    -s|--states)
    STATES=true
    shift # past argument
    ;;
    -ba|--barrel)
    BARREL=true
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Color
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m\n' # No Color

blocName=$1

filePath="$PWD/lib/blocs/$blocName"

if [ -d "$filePath" ]; then
  if [ -z "$(ls -A $filePath)" ]; then
    rm -r $filePath
  else
    if [ "$FORCE" == "true" ]; then
      printf "${RED}Force parameter is set, so removing the existing $filePath${NC}"
      rm -r $filePath
    else
      printf "${RED}The folder already exists, and has content, use -f or --force to override the content!${NC}"
      exit
    fi
  fi
fi

mkdir $filePath

classPrefix=''
IFS='_' read -ra BLOCNAMES <<< "$blocName"
for i in "${BLOCNAMES[@]}"; do
  classPrefix=$classPrefix$(tr a-z A-Z <<< ${i:0:1})${i:1}
done

stateClassName=$classPrefix"State"
stateFileName=$blocName"_states.dart"

eventClassName=$classPrefix"Event"
eventFileName=$blocName"_events.dart"

blocClassName=$classPrefix"Bloc"
blocFileName=$blocName"_bloc.dart"

barrelFileName=$blocName"_barrel.dart"

# State
file=$filePath"/"$stateFileName
initialStateClass=$classPrefix"InitialState"
if [[ "$ALL" == "true" ||  "$STATES" == "true" ]]; then
cat <<EOF > $file
import 'package:equatable/equatable.dart';

abstract class $stateClassName extends Equatable {
  @override
  List<Object> get props => [];
}

class $initialStateClass extends $stateClassName {}
EOF
fi

# Event
file=$filePath"/"$eventFileName
if [[ "$ALL" == "true" ||  "$EVENTS" == "true" ]]; then
cat <<EOF > $file
import 'package:equatable/equatable.dart';

abstract class $eventClassName extends Equatable {
  $eventClassName();
}
EOF
fi

# Bloc
file=$filePath"/"$blocName"_bloc.dart"
if [[ "$ALL" == "true" ||  "$BLOC" == "true" ]]; then
cat <<EOF > $file
import 'dart:async';
import 'package:bloc/bloc.dart';
import '$barrelFileName';

class $blocClassName extends Bloc<$eventClassName, $stateClassName> {
  $blocClassName() : super ($initialStateClass());

  @override
  Stream<$stateClassName> mapEventToState($eventClassName event) async* {
  }
}
EOF
fi

# Barrel file
file=$filePath"/"$barrelFileName
if [[ "$ALL" == "true" ||  "$BARREL" == "true" ]]; then
cat <<EOF > $file
export '$eventFileName';
export '$stateFileName';
export '$blocFileName';
EOF

# Write to blocs barrel file
blocsBarrelFile='lib/blocs/blocs_barrel.dart';
if [ ! -f blocs_barrel.dart ]; then
touch $blocsBarrelFile
fi

oldContent=`cat $blocsBarrelFile`
cat <<EOF > $blocsBarrelFile
$oldContent
export '$blocName/$barrelFileName';
EOF
fi

exit
